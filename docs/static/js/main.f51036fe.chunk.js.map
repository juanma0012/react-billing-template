{"version":3,"sources":["components/InvoiceRevision.js","App.js","serviceWorker.js","index.js"],"names":["InvoiceRevision","_ref","invoice","react_default","a","createElement","className","data-placement","data-toggle","title","number","Date","date","toLocaleDateString","dueDate","terms","billTo","Intl","NumberFormat","format","balance","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","res","json","result","setState","console","log","error","components_InvoiceRevision","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAgFeA,SA5ES,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,WAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCACTH,EAAAC,EAAAC,cAAA,QAAME,iBAAe,MAAMC,cAAY,UAAUC,MAAM,kBAClDP,EAAQQ,UAIrBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAAf,sBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,aAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACVJ,EAAQQ,SAGjBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,QAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACT,IAAIK,KAAoB,IAAfT,EAAQU,MAAaC,uBAGxCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,YAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACT,IAAIK,KAAuB,IAAlBT,EAAQY,SAAgBD,uBAG3CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,SAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACVJ,EAAQa,SAIrBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACVJ,EAAQc,SAGjBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,+BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,KACQ,IAAIW,KAAKC,aAAa,SAASC,OAAOjB,EAAQkB,gBC9B3DC,qBAjCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAE5B,QAAS,IAFPqB,mFAIC,IAAAQ,EAAAL,KAIlBM,MAAM,mBACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACD,SAACG,GACCL,EAAKM,SAAS,CACZnC,QAASkC,IAEXE,QAAQC,IAAIH,IAEd,SAACI,GACCT,EAAKM,SAAS,CACZG,6CAMN,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,CAAiBvC,QAASwB,KAAKI,MAAM5B,kBA5B3BwC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.f51036fe.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './components.scss';\r\n\r\nconst InvoiceRevision = ({ invoice }) => (\r\n    <div className=\" InvoiceRevision d-flex flex-column\">\r\n        <div className=\"flex-row\">\r\n            <h1 className=\"d-inline-block\">\r\n                Invoice\r\n            </h1>\r\n            <p className=\"ml-3 d-inline-block invoice-number\">\r\n                <span data-placement=\"top\" data-toggle=\"tooltip\" title=\"Invoice Number\">\r\n                    {invoice.number}\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"revision-section\">\r\n            <div className=\"font-weight-bold title-section\">\r\n                INVOICE - REVISION\r\n            </div>\r\n            <div className=\"d-flex flex-row\">\r\n                <div className=\"left-section col-sm container\">\r\n                    <div className=\"d-flex flex-row mb-2\">\r\n                        <div className=\"col-sm\">\r\n                            Invoice #\r\n                        </div>\r\n                        <div className=\"col-sm text-right font-weight-bold\" >\r\n                            {invoice.number}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row mb-1\">\r\n                        <div className=\"col-sm\">\r\n                            Date\r\n                        </div>\r\n                        <div className=\"col-sm text-right font-weight-bold\">\r\n                            {(new Date(invoice.date * 1000).toLocaleDateString())}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row mb-1\">\r\n                        <div className=\"col-sm\">\r\n                            Due Date\r\n                        </div>\r\n                        <div className=\"col-sm text-right font-weight-bold\">\r\n                            {(new Date(invoice.dueDate * 1000).toLocaleDateString())}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row mb-2\">\r\n                        <div className=\"col-sm\">\r\n                            Terms\r\n                        </div>\r\n                        <div className=\"col-sm text-right font-weight-bold\">\r\n                            {invoice.terms}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mid-section col-sm\">\r\n                    <div className=\"font-weight-bold\">\r\n                        Bill To\r\n                    </div>\r\n                    <div className=\"font-weight-bold bill-to\">\r\n                        {invoice.billTo}\r\n                    </div>\r\n                </div>\r\n                <div className=\"right-section col-sm\">\r\n                    <div className=\"font-weight-bold\">\r\n                        New Balance upon Re-booking\r\n                    </div>\r\n                    <div className=\"font-weight-bold balance\">\r\n                        $ {(new Intl.NumberFormat('us-US').format(invoice.balance))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nInvoiceRevision.propTypes = {\r\n    invoice: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default InvoiceRevision\r\n","import React, { Component } from 'react';\nimport InvoiceRevision from './components/InvoiceRevision'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { invoice: {} };\n  }\n  componentDidMount() {\n    /**\n     * Here should be the API call to get the Invoice data.\n     */\n    fetch(\"/mock/data.json\")\n      .then(res => res.json())\n      .then(\n      (result) => {\n        this.setState({\n          invoice: result\n        });\n        console.log(result);\n      },\n      (error) => {\n        this.setState({\n          error\n        });\n      }\n      )\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <InvoiceRevision invoice={this.state.invoice}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}